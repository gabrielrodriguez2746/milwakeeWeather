# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#

version: 2

config_android: &config_android
  docker:
  - image: circleci/android:api-28-alpha
  parallelism: 1
  resource_class: xlarge
  working_directory: ~/circleci
  environment:
    _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
    GRADLE_OPTS: "-Xmx14000m -Dorg.gradle.daemon=false"
    JVM_OPTS: "-Xmx14000m"
    TERM: dumb

gen_cache_key: &gen_cache_key
  run:
    name: Generate cache key
    command: |
      ./checksum.sh /tmp/checksum.txt
restore_cache: &restore_cache
  restore_cache:
    key: gradle-{{ checksum "/tmp/checksum.txt" }}

save_cache: &save_cache
  save_cache:
    paths:
    - ~/.gradle/caches
    - ~/.gradle/wrapper
    key: gradle-{{ checksum "/tmp/checksum.txt" }}

attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/circleci

decode_android_key: &decode_android_key
  run:
    name: Decode Android key store
    command: echo $KEYSTORE | base64 -di | tee keystore.jks app/keystore.jks >/dev/null

gems_key: &gems_key
            gems-{{ checksum "Gemfile.lock" }}

restore_gems_cache: &restore_gems_cache
  restore_cache:
    key: *gems_key

save_gems_cache: &save_gems_cache
  save_cache:
    key: *gems_key
    paths:
    - vendor/bundle

ruby_dependencies: &ruby_dependencies
  run:
    name: Download Ruby Dependencies
    command: bundle check || bundle install --path vendor/bundle

android_dependencies: &android_dependencies
  run:
    name: Download Android Dependencies
    command: ./gradlew androidDependencies

create_google_play_key: &create_google_play_key
  run:
    name: Create Google Play key
    command: echo $GOOGLE_PLAY_KEY > google-play-key.json

jobs:

  config_cache:
    <<: *config_android
    steps:
    - checkout
    - <<: *gen_cache_key
    - <<: *restore_cache
    - <<: *restore_gems_cache
    - <<: *android_dependencies
    - <<: *ruby_dependencies
    - <<: *save_cache
    - <<: *save_gems_cache

  detekt:
    <<: *config_android
    steps:
    - checkout
    - <<: *gen_cache_key
    - <<: *restore_cache
    - run:
        name: Run Detekt
        command: ./gradlew detekt

  ktlint:
    <<: *config_android
    steps:
    - checkout
    - <<: *attach_workspace
    - <<: *gen_cache_key
    - <<: *restore_cache
    - run:
        name: Run Ktlint
        command: ./gradlew ktlint

  android_lint:
    <<: *config_android
    steps:
    - checkout
    - <<: *attach_workspace
    - <<: *gen_cache_key
    - <<: *restore_cache
    - run:
        name: Run Android Lint
        command: ./gradlew lintDebug

  unit_tests:
    <<: *config_android
    steps:
    - checkout
    - <<: *attach_workspace
    - <<: *gen_cache_key
    - <<: *restore_cache
    - run:
        name: Run Unit Tests
        command: ./gradlew testDebugUnitTest --continue
    - run:
        name: Save test results
        command: |
          ./move_results.sh *index.html test_html_results
          ./move_results.sh [TEST]*[.xml] test_xml_results
        when: always
    - store_test_results:
        path: ~/test_html_results
    - store_artifacts:
        path: ~/test_html_results
    - store_test_results:
        path: ~/test_xml_results
    - store_artifacts:
        path: ~/test_xml_results

  deploy_play_store:
    <<: *config_android
    steps:
    - checkout
    - <<: *attach_workspace
    - <<: *gen_cache_key
    - <<: *restore_cache
    - <<: *restore_gems_cache
    - run:
        name: Install fastlane
        command: bundle install
    - <<: *decode_android_key
    - <<: *create_google_play_key
    - run:
        name: Increase version code
        command: ./gradlew incrementVersionCode
    - run:
        name: Assemble Apks
        command: bundle exec fastlane assemble_build
    - store_artifacts:
        path: app/build/outputs/apk/
        destination: /apk/
    - run:
        name: Deploy to Play Store Prod
        command: bundle exec fastlane deploy_to_play_store_prod
    - run:
        name: Deploy to Play Store Dev
        command: bundle exec fastlane deploy_to_play_store_dev
    - store_artifacts:
        path: app/build/outputs/mapping/
        destination: /mapping

workflows:
  version: 2
  check:
    jobs:
    - config_cache
    #    - detekt:
    #        requires:
    #        - config_cache
    #      - ktlint
    #    - android_lint:
    #        requires:
    #        - config_cache
    - unit_tests:
        requires:
          - config_cache
        filters:
          branches:
            ignore:
              - master
#    - deploy_play_store:
#        type: approval
#        requires:
#          - config_cache
#        filters:
#          branches:
#            only:
#              - master